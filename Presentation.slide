Introduction To Go
RPI Computing Club
18:00 18 Sep 2013
Tags: Introduction, RPI

Bharath Santosh

Colin Rice

* What is Go?

Go is an open source programming environment that makes it easy to build simple, reliable, and efficient software

.image images/gopher.png

* Who Wrote It?

.image images/Googlelogo.png 156 456

Rob Pike

.image images/Rob-pike.jpg 496 341

* Who Wrote It?

Ken Thompson

.image images/Ken_n_dennis.jpg

Robert Griesemer

.image images/96.png

* Why did they write it

Go was designed with Systems Programming in mind

Databases, Caches, Load Balances, ...

Also used for writing Web Apps, Google Doodles, Games, Graphics Tools

Main Reasons

Fast Compiling

Collaboration

Concurrency

"Grouphugs, Goroutings, GCC sucks"
-Colin Rice

* Who Uses It?

.link http://dl.google.com dl.google.com

.link http://cloudlfare.com clouflare.com

.link http://docker.io docker.io

This Presentation

Your Next Project?

* A Tour Of Go

* Hello Golang

.play hello.go

* Arrays

* Arrays Suck

"Arrays are... ok"
-Bharath Santosh

* Slices

The better array

* Slices

.image images/slice.webp

* Slices

.image images/slice2.webp

* Slices

.play slice.go

* Maps

.play maps.go

* Structs

.code geometry/geometry.go  

* Intefaces

.play interfaces.go
.link http://tour.golang.org/#54

* Concurrency

* Concurrency

Communicating Sequential Processes

Lightweight threads - goroutines 

Communication over unix-like pipes - channels

* Goroutines

  go foo(bar)

- Executes a function call in a lightweight threads

- Costs just a couple KB

- Can run hundreds of thousands on one machine

- Have their own effectively infinite stack

- Distributed over multiple cores

*  Channels

   channel := make(chan string)

Construct a syncronous channel that commumicates strings

   channel <- "bar"

Send the string into the channel

   foo := <-channel

Block and wait until there is something in the channel to take

   asynCh := make(chan string, 100)

Asynchrnous channel that only blocks after 100 items in channel's queue

* Concurrency Examples - Concurrent IO

.play goroutines.go

* Concurrency Examples - Workers

.link http://play.golang.org/p/rEIhu5Ml1G

* Concurrency Examples - Conncurrent Prime Sieve

.link http://play.golang.org/p/jTG5ikGdpQ

* cGo

.play cgo.go

* Kitchen Sink

.link http://golang.org/pkg/
ssh client
crypto/*
go fmt
go vet
go fix

* FizzBuzz

Write FizzBuzz

Print the numbers from 1 to 100 as follows
If the number % 3 is 0 print Fizz
If the number % 5 is 0 print Buzz
If the number %15 is 0 (%3 & %5 == 0) print FizzBuzz
Otherwise print the number

Advanced Mode:
Do this using at least two channels and three go routines, and kill them when done
Do this using the read interface

* Jumpstart

.link http://golang.org
.link http://tour.golang.org
.link http://golang.org/doc/effective_go.html
.link http://godoc.org

