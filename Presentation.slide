Introduction To Go
UPE IO
18:00 20 Feb 2015
Tags: Introduction, RPI

Colin Rice

(Previously Bharath Santosh)

* Obligatory Statement

I work for Google. This presentation is not an official Google presentation,
and is purely my own opinion.

If this statement confuses you, please come talk to me afterwards.

* What is Go?

Go is an open source programming environment that makes it easy to build simple, reliable, and efficient software

.image images/gopher.png

* Who Wrote It?

.link https://golang.org/doc/faq#history https://golang.org/doc/faq#history

Originally
Rob Pike, Ken Thompson, Robert Griesemer
+ Ian Lance Taylor, Russ Cox + Lots of other people.

* Why did they write it

Go was designed with systems programming in mind.

Databases, Caches, Load Balancers, ...

Also used for writing Web Services, Google Doodles, Games, Graphics Tools

Main Reasons (debatable)

Fast Compilation

Collaboration

Concurrency

"Grouphugs, Goroutines, GCC is an impolite word"
-Colin Rice

* Who Uses It?

.link http://dl.google.com dl.google.com

.link http://cloudlfare.com clouflare.com

.link http://docker.io docker.io

.link http://coreos.com coreos.com

This Presentation

Your Next Project?

* A Tour Of Go

* Hello Golang

.play hello.go

* Arrays

* Arrays are an impolite word

"Arrays are... ok"
-Bharath Santosh

* Slices

The better array

* Slices

.link https://blog.golang.org/go-slices-usage-and-internals blog.golang.org/go-slices-usage-and-internals

.image images/slice.webp

* Slices

.image images/slice2.webp

* Slices

.play slice.go

* Maps

.play maps.go

* Structs

.code geometry/geometry.go

* Interfaces

.play interfaces.go
.link https://tour.golang.org/methods/5

* Concurrency

* Concurrency

Communicating Sequential Processes

Lightweight threads / Coroutines - goroutines

Communication over unix-like pipes - channels

* Goroutines

  go foo(bar)

- Executes a function call in a lightweight coroutine

- Costs just a few KB

- Can run hundreds of thousands on one machine

- Have their own effectively 'infinite' stack

- Can be distributed over multiple cores

*  Channels

   channel := make(chan string)

Construct a syncronous channel that commumicates strings

   channel <- "bar"

Send the string into the channel

   foo := <-channel

Block and wait until there is something in the channel to take

   asynCh := make(chan string, 100)

Asynchronous channel that only blocks after 100 items in channel's queue

* Concurrency Examples - Concurrent IO

.play goroutines.go

* Concurrency Examples - Workers

.link http://play.golang.org/p/rEIhu5Ml1G

* Concurrency Examples - Conncurrent Prime Sieve

.link http://play.golang.org/p/jTG5ikGdpQ

* cGo

.play cgo.go

* Kitchen Sink

.link http://golang.org/pkg/

go fmt, vet, fix

.link https//godoc.org/golang.org/x/crypto

.link http://godoc.org/golang.org/x/crypto/ssh

.link http://godoc.org/golang.org/x/tools

oracle
gomvpkg
goimports
eg
present

* FizzBuzz

Write FizzBuzz

Print the numbers from 1 to 100 as follows
If the number % 3 is 0 print Fizz
If the number % 5 is 0 print Buzz
If the number %15 is 0 (%3 & %5 == 0) print FizzBuzz
Otherwise print the number

Advanced Mode:
Do this using at least two channels and three goroutines, and kill them when done
Do this using the read interface

* Jumpstart

.link http://golang.org
.link http://tour.golang.org
.link http://golang.org/doc/effective_go.html
.link http://godoc.org

